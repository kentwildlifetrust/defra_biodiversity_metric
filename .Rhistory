result <- readxl::read_xlsx(path_edit, "D-1 Off-Site Habitat Baseline", range = "I10:J142")
stopifnot(identical(toLower(result$`Distinctiveness`), toLower(test_data$distinctiveness_name)))
tolower(
)
stopifnot(identical(tolower(result$`Distinctiveness`), tolower(test_data$distinctiveness_name)))
stopifnot(identical(result$`Score`, test_data$score))
View(test_data)
stopifnot(identical(result$`Score`, test_data$distinctiveness_score))
file.remove(path_edit)
range <- "'G-8 Condition Look up'!$A$3:$H$135"
condition_scores <- get_vals(range)
View(condition_scores)
conditions
test_data <- habitat_labels %>%
dplyr::filter(is_baseline) %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::left_join(conditions, by = "condition_id")
test_data <- habitat_labels %>%
dplyr::filter(is_baseline) %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::full_join(habitat_conditions, "habitat_type_id") %>%
dplyr::left_join(conditions, by = "condition_id")
View(test_data)
LETTERS %in% "K"
LETTERS %in% "K" %>% which()
#save the data into the excel file
workbook <- openxlsx::loadWorkbook(path)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = test_data[, "habitat_label"], startRow = 11, startCol = 6, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = test_data[, "condition_name"], startRow = 11, startCol = 11, colNames = F)
openxlsx::saveWorkbook(workbook, path_edit, overwrite = T)
#open the workbook using RDCOMClient
excelApp <- RDCOMClient::COMCreate("Excel.Application")
workbook <- excelApp$Workbooks()$Open(path_edit)
# Force recalculation
excelApp$CalculateFull()
# Save the workbook
workbook$Save()
# Close the workbook and Excel application
workbook$Close()
excelApp$Quit()
# Release resources
rm(excelApp)
gc()
#get the result
result <- readxl::read_xlsx(path_edit, "D-1 Off-Site Habitat Baseline", range = "K10:L142")
View(result)
stopifnot(identical(tolower(result$`Distinctiveness`), tolower(test_data$distinctiveness_name)))
stopifnot(identical(result$`Score`, test_data$distinctiveness_score))
stopifnot(identical(tolower(result$Condition), tolower(test_data$condition_name)))
View(result)
tolower(result$Condition)
tolower(test_data$condition_name)
nrow(test_data)
i <- 2
lims <- seq(1, nrow(test_data), by = 248)
test_data_sub <- test_data[lims[i - 1]:(lims[i] - 1), ]
stopifnot(identical(tolower(result$Condition), tolower(test_data_sub$condition_name)))
nrow(result)
nrow(test_data_sub)
test_data_sub <- test_data[lims[i - 1]:(lims[i] - 1), ]
#save the data into the excel file
workbook <- openxlsx::loadWorkbook(path)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = test_data_sub[, "habitat_label"], startRow = 11, startCol = 6, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = test_data_sub[, "condition_name"], startRow = 11, startCol = 11, colNames = F)
openxlsx::saveWorkbook(workbook, path_edit, overwrite = T)
#open the workbook using RDCOMClient
excelApp <- RDCOMClient::COMCreate("Excel.Application")
workbook <- excelApp$Workbooks()$Open(path_edit)
# Force recalculation
excelApp$CalculateFull()
# Save the workbook
workbook$Save()
# Close the workbook and Excel application
workbook$Close()
excelApp$Quit()
# Release resources
rm(excelApp)
gc()
#get the result
result <- readxl::read_xlsx(path_edit, "D-1 Off-Site Habitat Baseline", range = "K10:L142")
stopifnot(identical(tolower(result$Condition), tolower(test_data_sub$condition_name)))
nrow(result)
nrow(condition_name)
result <- readxl::read_xlsx(path_edit, "D-1 Off-Site Habitat Baseline", range = "K10:L153")
View(result)
nrow(test_data_sub)
nrow(result)
result <- readxl::read_xlsx(path_edit, "D-1 Off-Site Habitat Baseline", range = "K10:L258")
nrow(result)
stopifnot(identical(tolower(result$Condition), tolower(test_data_sub$condition_name)))
stopifnot(identical(result$`Score`, test_data_sub$distinctiveness_score))
condition_scores <- get_vals(range) #same range used before
View(condition_scores)
View(conditions)#
conditions <- get_vals("'G-8 Condition Look up'!$J$5:$N$9", n_merges = 1)
conditions
condition_scores <- get_vals("G-1 All Habitats'!Z2:AA9", n_merges = 1)
condition_scores
condition_scores <- get_vals("G-1 All Habitats'!Z3:AA9", n_merges = 1)
condition_scores
condition_scores <- get_vals("G-1 All Habitats'!Z2:AA9", n_merges = 0)
condition_scores
conditions
condition_types
View(habitat_conditions)
View(conditions_group_lookup)
View(conditions)
View(conditions)
c
conditions <- data.frame(condition_name = unique(habitat_conditions$condition_name))
conditions$condition_id <- 1:nrow(conditions)
conditions <- data.frame(condition_name = unique(habitat_conditions$condition_name))
conditions$condition_id <- 1:nrow(conditions)
sheet_range <- "=INDIRECT(B11)"
formula_b11 <- '=IFERROR(INDEX(\'G-8 Condition Look up\'!$I$4:$I$135,MATCH(AV11,\'G-8 Condition Look up\'!$A$4:$A$135,0)),"")'
match_range <- get_vals("'G-8 Condition Look up'!$A$4:$A$135", n_merges = 1)
index_range <- get_vals("'G-8 Condition Look up'!$I$4:$I$135", n_merges = 1)
condition_lookup <- cbind(match_range, index_range)
colnames(condition_lookup) <- c("habitat_name", "condition_group")
stopifnot(!any(apply(condition_lookup, 1, function(x) any(is.na(x)))))
#get condition groups
condition_groups <- get_vals("'G-8 Condition Look up'!$J$4:$N$4", n_merges = 1) %>%
unlist() %>%
unname()
conditions <- get_vals("'G-8 Condition Look up'!$J$5:$N$9", n_merges = 1)
colnames(conditions) <- condition_groups
conditions_group_lookup <- tidyr::pivot_longer(conditions, cols = 1:ncol(conditions), names_to = "condition_group", values_to = "condition_name") %>%
dplyr::filter(!is.na(condition_name))
#get all possible combinations of habitat_name & conditions
habitat_conditions <- condition_lookup %>%
dplyr::left_join(conditions_group_lookup, by = "condition_group", relationship = "many-to-many")
stopifnot(!any(duplicated(habitat_conditions)))
habitat_conditions <- habitat_conditions %>%
dplyr::mutate(habitat_condition_id = 1:nrow(.))
conditions <- data.frame(condition_name = unique(habitat_conditions$condition_name))
conditions$condition_id <- 1:nrow(conditions)
habitat_conditions <- habitat_conditions %>%
dplyr::left_join(conditions, by = "condition_name") %>%
dplyr::left_join(habitat_types, by = "habitat_name") %>%
dplyr::select(habitat_condition_id, habitat_type_id, condition_id)
View(conditions)
#need the scores to be added to data
condition_scores <- get_vals("G-1 All Habitats'!Z2:AA9")
colnames(condition_scores) <- c("condition_name", "condition_score")
conditions <- conditions %>%
dplyr::left_join(condition_scores, by = "condition_name")
View(conditions)
stopifnot(identical(result$`Score`, test_data_sub$condition_score))
test_data_sub <- test_data[lims[i - 1]:(lims[i] - 1), ]
test_data <- habitat_labels %>%
dplyr::filter(is_baseline) %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::full_join(habitat_conditions, "habitat_type_id") %>%
dplyr::left_join(conditions, by = "condition_id")
test_data_sub <- test_data[lims[i - 1]:(lims[i] - 1), ]
stopifnot(identical(tolower(result$Condition), tolower(test_data_sub$condition_name)))
stopifnot(identical(result$`Score`, test_data_sub$condition_score))
View(result)
View(test_data_sub)
nrow(result)
nrow(test_data_sub)
View(rbind(result, test_data_sub))
View(cbind(result, test_data_sub))
View(cbind(result, test_data_sub %>% dplyr::select(condition_score))
)
class(test_data_sub$condition_score)
conditions$condition_score <- as.numeric(conditions$condition_score)
test_data <- habitat_labels %>%
dplyr::filter(is_baseline) %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::full_join(habitat_conditions, "habitat_type_id") %>%
dplyr::left_join(conditions, by = "condition_id")
test_data_sub <- test_data[lims[i - 1]:(lims[i] - 1), ]
stopifnot(identical(result$`Score`, test_data_sub$condition_score))
i
i <- 2
i <- 3
test_data_sub <- test_data[lims[i - 1]:(lims[i] - 1), ]
#save the data into the excel file
workbook <- openxlsx::loadWorkbook(path)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = test_data_sub[, "habitat_label"], startRow = 11, startCol = 6, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = test_data_sub[, "condition_name"], startRow = 11, startCol = 11, colNames = F)
openxlsx::saveWorkbook(workbook, path_edit, overwrite = T)
#open the workbook using RDCOMClient
excelApp <- RDCOMClient::COMCreate("Excel.Application")
workbook <- excelApp$Workbooks()$Open(path_edit)
# Force recalculation
excelApp$CalculateFull()
# Save the workbook
workbook$Save()
# Close the workbook and Excel application
workbook$Close()
excelApp$Quit()
# Release resources
rm(excelApp)
gc()
#get the result
result <- readxl::read_xlsx(path_edit, "D-1 Off-Site Habitat Baseline", range = "K10:L258")
#check the result
stopifnot(identical(tolower(result$Condition), tolower(test_data_sub$condition_name)))
stopifnot(identical(result$`Score`, test_data_sub$condition_score))
strategic_significances
#range
sheet_range <- "'G-3 Multipliers'!$L$4:$L$6"
#This is a static range
strategic_significances <- get_vals(sheet_range)
colnames(strategic_significances) <- "strategic_significance_description"
strategic_significances
#M11 is strategic_significance_description
vlookup_range <- "'G-3 Multipliers'!$L$3:$N$6"
strategic_significances <- get_vals(vlookup_range)
View(strategic_significances)
strategic_significances <- get_vals(vlookup_range, n_merges = 1)
View(strategic_significances)
strategic_significances <- get_vals(vlookup_range, n_merges = -1)
View(strategic_significances)
strategic_significances <- get_vals(vlookup_range, n_merges = 0) %>%
dplyr::slice(-1) #get rid of header
View(strategic_significances)
colnames(strategic_significances) <- c("strategic_significance_description", "strategic_significance_name", "strategic_significance_multiplier")
strategic_significances <- strategic_significances %>%
dplyr::mutate(strategic_significance_multiplier = as.numeric(strategic_significance_multiplier))
strategic_significances <- strategic_significances %>%
dplyr::mutate(strategic_significance_multiplier = as.numeric(strategic_significance_multiplier)) %>%
dplyr::mutate(strategic_significance_id = 1:nrow(.))
View(baseline_habitats)
sample(habitat_labels$habitat_label_id, 10)
max_rows
baseline_habitat_parcels <- data.frame(
habitat_label_id = sample(habitat_labels %>%
dplyr::filter(is_baseline) %>%
dplyr::pull(habitat_label_id), max_rows),
area_retained_ha = runif(max_rows, 0, 100),
strategic_significance_id = sample(strategic_significances$strategic_significance_id, max_rows)
)
baseline_habitat_parcels <- data.frame(
habitat_label_id = sample(habitat_labels %>%
dplyr::filter(is_baseline) %>%
dplyr::pull(habitat_label_id), max_rows, replace = T),
area_retained_ha = runif(max_rows, 0, 100),
strategic_significance_id = sample(strategic_significances$strategic_significance_id, max_rows, replace = T)
)
baseline_habitat_parcels <- baseline_habitat_parcels %>%
dplyr::left_join(habitat_labels, by = "habitat_label_id") %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::left_join(distinctivenesses, by = "distinctiveness_id") %>%
dplyr::mutate(condition_id = sapply(habitat_type_id, function(x) sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1))) %>%
dplyr::left_join(conditions, by = "condition_id")
View(baseline_habitat_parcels)
baseline_habitat_parcels <- baseline_habitat_parcels %>%
dplyr::left_join(habitat_labels, by = "habitat_label_id") %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::left_join(distinctivenesses, by = "distinctiveness_id") %>%
dplyr::mutate(condition_id = sapply(habitat_type_id, function(x) sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1))) %>%
dplyr::left_join(conditions, by = "condition_id") %>%
dplyr::mutate(baseline_units_retained = area_retained_ha * distinctiveness_score * condition_score * strategic_significance_multiplier)
baseline_habitat_parcels <- data.frame(
habitat_label_id = sample(habitat_labels %>%
dplyr::filter(is_baseline) %>%
dplyr::pull(habitat_label_id), max_rows, replace = T),
area_retained_ha = runif(max_rows, 0, 100),
strategic_significance_id = sample(strategic_significances$strategic_significance_id, max_rows, replace = T)
)
baseline_habitat_parcels <- baseline_habitat_parcels %>%
dplyr::left_join(habitat_labels, by = "habitat_label_id") %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::left_join(distinctivenesses, by = "distinctiveness_id") %>%
dplyr::mutate(condition_id = sapply(habitat_type_id, function(x) sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1))) %>%
dplyr::left_join(conditions, by = "condition_id") %>%
dplyr::mutate(baseline_units_retained = area_retained_ha * distinctiveness_score * condition_score * strategic_significance_multiplier)
baseline_habitat_parcels <- baseline_habitat_parcels %>%
dplyr::left_join(habitat_labels, by = "habitat_label_id") %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::left_join(distinctivenesses, by = "distinctiveness_id") %>%
dplyr::mutate(condition_id = sapply(habitat_type_id, function(x) sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1))) %>%
dplyr::left_join(conditions, by = "condition_id") %>%
dplyr::left_join(strategic_significances, by = "strategic_significance_id") %>%
dplyr::mutate(baseline_units_retained = area_retained_ha * distinctiveness_score * condition_score * strategic_significance_multiplier)
View(baseline_habitat_parcels)
which("H" %in% LETTER)
which("H" %in% LETTERs)
which("H" %in% LETTERS)
which("H" == LETTERS)
which("V" == LETTERS)
workbook <- openxlsx::loadWorkbook(path)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = test_data[, "habitat_label"], startRow = 11, startCol = 6, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = test_data[, "area_retained_ha"], startRow = 11, startCol = 8, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "habitat_label"], startRow = 11, startCol = 6, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "area_retained_ha"], startRow = 11, startCol = 8, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "condition_name"], startRow = 11, startCol = 11, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "area_retained_ha"], startRow = 11, startCol = 22, colNames = F)
openxlsx::saveWorkbook(workbook, path_edit, overwrite = T)
#open the workbook using RDCOMClient
excelApp <- RDCOMClient::COMCreate("Excel.Application")
workbook <- excelApp$Workbooks()$Open(path_edit)
# Force recalculation
excelApp$CalculateFull()
# Save the workbook
workbook$Save()
# Close the workbook and Excel application
workbook$Close()
excelApp$Quit()
# Release resources
rm(excelApp)
gc()
#get the result
result <- readxl::read_xlsx(path_edit, "D-1 Off-Site Habitat Baseline", range = "X10:X258")
View(result)
which(LETTERS=="M")
#check with spreadsheet
workbook <- openxlsx::loadWorkbook(path)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "habitat_label"], startRow = 11, startCol = 6, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "area_retained_ha"], startRow = 11, startCol = 8, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "condition_name"], startRow = 11, startCol = 11, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "strategic_significance_description"], startRow = 11, startCol = 13, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "area_retained_ha"], startRow = 11, startCol = 22, colNames = F)
openxlsx::saveWorkbook(workbook, path_edit, overwrite = T)
#open the workbook using RDCOMClient
excelApp <- RDCOMClient::COMCreate("Excel.Application")
workbook <- excelApp$Workbooks()$Open(path_edit)
# Force recalculation
excelApp$CalculateFull()
# Save the workbook
workbook$Save()
# Close the workbook and Excel application
workbook$Close()
excelApp$Quit()
# Release resources
rm(excelApp)
gc()
#get the result
result <- readxl::read_xlsx(path_edit, "D-1 Off-Site Habitat Baseline", range = "X10:X258")
View(result)
View(habitat_conditions)
x <- 131
sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
View(habitat_conditions)
habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x]
habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x]
habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x]
habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x]
habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x]
sample(7, 1)
sample(7, 1)
sample(7, 1)
sample(7, 1)
sample(7, 1)
sample(7, 1)
sample(7, 1)
?sample
baseline_habitat_parcels <- baseline_habitat_parcels %>%
dplyr::left_join(habitat_labels, by = "habitat_label_id") %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::left_join(distinctivenesses, by = "distinctiveness_id") %>%
dplyr::mutate(condition_id = sapply(habitat_type_id, function(x) {
if (length(x) == 1) return (x) #sample annoyingly uses 1:x in this case
sample(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
}) %>% unname()) %>%
dplyr::left_join(conditions, by = "condition_id") %>%
dplyr::left_join(strategic_significances, by = "strategic_significance_id") %>%
dplyr::mutate(baseline_units_retained = area_retained_ha * distinctiveness_score * condition_score * strategic_significance_multiplier)
baseline_habitat_parcels <- baseline_habitat_parcels %>%
dplyr::left_join(habitat_labels, by = "habitat_label_id") %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::left_join(distinctivenesses, by = "distinctiveness_id") %>%
dplyr::mutate(condition_id = sapply(habitat_type_id, function(x) {
#sample annoyingly uses 1:x when x is a single value
if (length(x) > 1) x <- sample(x, 1)
return(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
}) %>% unname()) %>%
dplyr::left_join(conditions, by = "condition_id") %>%
dplyr::left_join(strategic_significances, by = "strategic_significance_id") %>%
dplyr::mutate(baseline_units_retained = area_retained_ha * distinctiveness_score * condition_score * strategic_significance_multiplier)
baseline_habitat_parcels <- baseline_habitat_parcels %>%
dplyr::left_join(habitat_labels, by = "habitat_label_id") %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::left_join(distinctivenesses, by = "distinctiveness_id") %>%
dplyr::mutate(condition_id = sapply(habitat_type_id, function(x) {
#sample annoyingly uses 1:x when x is a single value
if (length(x) > 1) x <- sample(x, 1)
return(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
}) %>% unname())
baseline_habitat_parcels <- baseline_habitat_parcels %>%
dplyr::left_join(habitat_labels, by = "habitat_label_id") %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::left_join(distinctivenesses, by = "distinctiveness_id")
baseline_habitat_parcels <- data.frame(
habitat_label_id = sample(habitat_labels %>%
dplyr::filter(is_baseline) %>%
dplyr::pull(habitat_label_id), max_rows, replace = T),
area_retained_ha = runif(max_rows, 0, 100),
strategic_significance_id = sample(strategic_significances$strategic_significance_id, max_rows, replace = T)
)
baseline_habitat_parcels <- baseline_habitat_parcels %>%
dplyr::left_join(habitat_labels, by = "habitat_label_id") %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::left_join(distinctivenesses, by = "distinctiveness_id") %>%
dplyr::mutate(condition_id = sapply(habitat_type_id, function(x) {
#sample annoyingly uses 1:x when x is a single value
if (length(x) > 1) x <- sample(x, 1)
return(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x], 1)
}) %>% unname()) %>%
dplyr::left_join(conditions, by = "condition_id") %>%
dplyr::left_join(strategic_significances, by = "strategic_significance_id") %>%
dplyr::mutate(baseline_units_retained = area_retained_ha * distinctiveness_score * condition_score * strategic_significance_multiplier)
#generate random data
baseline_habitat_parcels <- data.frame(
habitat_label_id = sample(habitat_labels %>%
dplyr::filter(is_baseline) %>%
dplyr::pull(habitat_label_id), max_rows, replace = T),
area_retained_ha = runif(max_rows, 0, 100),
strategic_significance_id = sample(strategic_significances$strategic_significance_id, max_rows, replace = T)
)
baseline_habitat_parcels <- baseline_habitat_parcels %>%
dplyr::left_join(habitat_labels, by = "habitat_label_id") %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::left_join(distinctivenesses, by = "distinctiveness_id") %>%
dplyr::mutate(condition_id = sapply(habitat_type_id, function(x) {
#sample annoyingly uses 1:x when x is a single value
if (length(x) > 1) x <- sample(x, 1)
return(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x])
}) %>% unname()) %>%
dplyr::left_join(conditions, by = "condition_id") %>%
dplyr::left_join(strategic_significances, by = "strategic_significance_id") %>%
dplyr::mutate(baseline_units_retained = area_retained_ha * distinctiveness_score * condition_score * strategic_significance_multiplier)
View(baseline_habitat_parcels)
baseline_habitat_parcels <- data.frame(
habitat_label_id = sample(habitat_labels %>%
dplyr::filter(is_baseline) %>%
dplyr::pull(habitat_label_id), max_rows, replace = T),
area_retained_ha = runif(max_rows, 0, 100),
strategic_significance_id = sample(strategic_significances$strategic_significance_id, max_rows, replace = T)
)
baseline_habitat_parcels <- baseline_habitat_parcels %>%
dplyr::left_join(habitat_labels, by = "habitat_label_id") %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::left_join(distinctivenesses, by = "distinctiveness_id") %>%
dplyr::mutate(condition_id = sapply(habitat_type_id, function(x) {
#sample annoyingly uses 1:x when x is a single value
if (length(x) > 1) x <- sample(x, 1)
return(habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x])
}) %>% unname())
View(baseline_habitat_parcels)
habitat_conditions$condition_id[habitat_conditions$habitat_type_id == 1]
habitat_conditions$condition_id[habitat_conditions$habitat_type_id == 2]
habitat_conditions$condition_id[habitat_conditions$habitat_type_id == 3]
habitat_conditions$condition_id[habitat_conditions$habitat_type_id == 1:100]
habitat_conditions$condition_id[habitat_conditions$habitat_type_id == 1]
class(baseline_habitat_parcels$condition_id)
#generate random data
baseline_habitat_parcels <- data.frame(
habitat_label_id = sample(habitat_labels %>%
dplyr::filter(is_baseline) %>%
dplyr::pull(habitat_label_id), max_rows, replace = T),
area_retained_ha = runif(max_rows, 0, 100),
strategic_significance_id = sample(strategic_significances$strategic_significance_id, max_rows, replace = T)
)
baseline_habitat_parcels <- baseline_habitat_parcels %>%
dplyr::left_join(habitat_labels, by = "habitat_label_id") %>%
dplyr::left_join(habitat_types, by = "habitat_type_id") %>%
dplyr::left_join(distinctivenesses, by = "distinctiveness_id") %>%
dplyr::mutate(condition_id = sapply(habitat_type_id, function(x) {
matches <- habitat_conditions$condition_id[habitat_conditions$habitat_type_id == x]
#sample annoyingly uses 1:x when x is a single value
if (length(matches) == 1) return(matches)
return(sample(matches, 1))
}) %>% unname()) %>%
dplyr::left_join(conditions, by = "condition_id") %>%
dplyr::left_join(strategic_significances, by = "strategic_significance_id") %>%
dplyr::mutate(baseline_units_retained = area_retained_ha * distinctiveness_score * condition_score * strategic_significance_multiplier)
View(baseline_habitat_parcels)
#check with spreadsheet
workbook <- openxlsx::loadWorkbook(path)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "habitat_label"], startRow = 11, startCol = 6, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "area_retained_ha"], startRow = 11, startCol = 8, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "condition_name"], startRow = 11, startCol = 11, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "strategic_significance_description"], startRow = 11, startCol = 13, colNames = F)
openxlsx::writeData(workbook, sheet = "D-1 Off-Site Habitat Baseline", x = baseline_habitat_parcels[, "area_retained_ha"], startRow = 11, startCol = 22, colNames = F)
openxlsx::saveWorkbook(workbook, path_edit, overwrite = T)
#open the workbook using RDCOMClient
excelApp <- RDCOMClient::COMCreate("Excel.Application")
workbook <- excelApp$Workbooks()$Open(path_edit)
# Force recalculation
excelApp$CalculateFull()
# Save the workbook
workbook$Save()
# Close the workbook and Excel application
workbook$Close()
excelApp$Quit()
# Release resources
rm(excelApp)
gc()
#get the result
result <- readxl::read_xlsx(path_edit, "D-1 Off-Site Habitat Baseline", range = "X10:X258")
View(result)
stopifnot(identical(tolower(result$Condition), tolower(test_data_sub$condition_name)))
stopifnot(identical(result$`Baseline Units Retained`, baseline_habitat_parcels$baseline_units_retained))
View(cbind(result$`Baseline Units Retained`, baseline_habitat_parcels$baseline_units_retained))
View(cbind(result$`Baseline units retained`, baseline_habitat_parcels$baseline_units_retained))
stopifnot(identical(round(result$`Baseline Units Retained`, 2),
round(baseline_habitat_parcels$baseline_units_retained, 2)))
stopifnot(identical(round(result$`Baseline units retained`, 2),
round(baseline_habitat_parcels$baseline_units_retained, 2)))
